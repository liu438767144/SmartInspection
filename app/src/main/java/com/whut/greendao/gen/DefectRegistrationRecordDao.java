package com.whut.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.whut.smartinspection.model.DefectRegistrationRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEFECT_REGISTRATION_RECORD".
*/
public class DefectRegistrationRecordDao extends AbstractDao<DefectRegistrationRecord, Long> {

    public static final String TABLENAME = "DEFECT_REGISTRATION_RECORD";

    /**
     * Properties of entity DefectRegistrationRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property No = new Property(1, String.class, "no", false, "NO");
        public final static Property FindDate = new Property(2, String.class, "findDate", false, "FIND_DATE");
        public final static Property FindPerson = new Property(3, String.class, "findPerson", false, "FIND_PERSON");
        public final static Property DeviceType = new Property(4, String.class, "deviceType", false, "DEVICE_TYPE");
        public final static Property DefectDepartment = new Property(5, String.class, "defectDepartment", false, "DEFECT_DEPARTMENT");
        public final static Property DefectLevel = new Property(6, String.class, "defectLevel", false, "DEFECT_LEVEL");
        public final static Property DefectContent = new Property(7, String.class, "defectContent", false, "DEFECT_CONTENT");
        public final static Property IsReportSchedule = new Property(8, short.class, "isReportSchedule", false, "IS_REPORT_SCHEDULE");
        public final static Property IsEntered = new Property(9, short.class, "isEntered", false, "IS_ENTERED");
        public final static Property IsEliminateDefect = new Property(10, short.class, "isEliminateDefect", false, "IS_ELIMINATE_DEFECT");
        public final static Property ProcessingDetails = new Property(11, String.class, "processingDetails", false, "PROCESSING_DETAILS");
        public final static Property EliminationDefectDate = new Property(12, String.class, "eliminationDefectDate", false, "ELIMINATION_DEFECT_DATE");
        public final static Property Remark = new Property(13, String.class, "remark", false, "REMARK");
    }


    public DefectRegistrationRecordDao(DaoConfig config) {
        super(config);
    }
    
    public DefectRegistrationRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEFECT_REGISTRATION_RECORD\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NO\" TEXT," + // 1: no
                "\"FIND_DATE\" TEXT," + // 2: findDate
                "\"FIND_PERSON\" TEXT," + // 3: findPerson
                "\"DEVICE_TYPE\" TEXT," + // 4: deviceType
                "\"DEFECT_DEPARTMENT\" TEXT," + // 5: defectDepartment
                "\"DEFECT_LEVEL\" TEXT," + // 6: defectLevel
                "\"DEFECT_CONTENT\" TEXT," + // 7: defectContent
                "\"IS_REPORT_SCHEDULE\" INTEGER NOT NULL ," + // 8: isReportSchedule
                "\"IS_ENTERED\" INTEGER NOT NULL ," + // 9: isEntered
                "\"IS_ELIMINATE_DEFECT\" INTEGER NOT NULL ," + // 10: isEliminateDefect
                "\"PROCESSING_DETAILS\" TEXT," + // 11: processingDetails
                "\"ELIMINATION_DEFECT_DATE\" TEXT," + // 12: eliminationDefectDate
                "\"REMARK\" TEXT);"); // 13: remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEFECT_REGISTRATION_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DefectRegistrationRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String no = entity.getNo();
        if (no != null) {
            stmt.bindString(2, no);
        }
 
        String findDate = entity.getFindDate();
        if (findDate != null) {
            stmt.bindString(3, findDate);
        }
 
        String findPerson = entity.getFindPerson();
        if (findPerson != null) {
            stmt.bindString(4, findPerson);
        }
 
        String deviceType = entity.getDeviceType();
        if (deviceType != null) {
            stmt.bindString(5, deviceType);
        }
 
        String defectDepartment = entity.getDefectDepartment();
        if (defectDepartment != null) {
            stmt.bindString(6, defectDepartment);
        }
 
        String defectLevel = entity.getDefectLevel();
        if (defectLevel != null) {
            stmt.bindString(7, defectLevel);
        }
 
        String defectContent = entity.getDefectContent();
        if (defectContent != null) {
            stmt.bindString(8, defectContent);
        }
        stmt.bindLong(9, entity.getIsReportSchedule());
        stmt.bindLong(10, entity.getIsEntered());
        stmt.bindLong(11, entity.getIsEliminateDefect());
 
        String processingDetails = entity.getProcessingDetails();
        if (processingDetails != null) {
            stmt.bindString(12, processingDetails);
        }
 
        String eliminationDefectDate = entity.getEliminationDefectDate();
        if (eliminationDefectDate != null) {
            stmt.bindString(13, eliminationDefectDate);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(14, remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DefectRegistrationRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String no = entity.getNo();
        if (no != null) {
            stmt.bindString(2, no);
        }
 
        String findDate = entity.getFindDate();
        if (findDate != null) {
            stmt.bindString(3, findDate);
        }
 
        String findPerson = entity.getFindPerson();
        if (findPerson != null) {
            stmt.bindString(4, findPerson);
        }
 
        String deviceType = entity.getDeviceType();
        if (deviceType != null) {
            stmt.bindString(5, deviceType);
        }
 
        String defectDepartment = entity.getDefectDepartment();
        if (defectDepartment != null) {
            stmt.bindString(6, defectDepartment);
        }
 
        String defectLevel = entity.getDefectLevel();
        if (defectLevel != null) {
            stmt.bindString(7, defectLevel);
        }
 
        String defectContent = entity.getDefectContent();
        if (defectContent != null) {
            stmt.bindString(8, defectContent);
        }
        stmt.bindLong(9, entity.getIsReportSchedule());
        stmt.bindLong(10, entity.getIsEntered());
        stmt.bindLong(11, entity.getIsEliminateDefect());
 
        String processingDetails = entity.getProcessingDetails();
        if (processingDetails != null) {
            stmt.bindString(12, processingDetails);
        }
 
        String eliminationDefectDate = entity.getEliminationDefectDate();
        if (eliminationDefectDate != null) {
            stmt.bindString(13, eliminationDefectDate);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(14, remark);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DefectRegistrationRecord readEntity(Cursor cursor, int offset) {
        DefectRegistrationRecord entity = new DefectRegistrationRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // no
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // findDate
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // findPerson
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // deviceType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // defectDepartment
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // defectLevel
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // defectContent
            cursor.getShort(offset + 8), // isReportSchedule
            cursor.getShort(offset + 9), // isEntered
            cursor.getShort(offset + 10), // isEliminateDefect
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // processingDetails
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // eliminationDefectDate
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DefectRegistrationRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFindDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFindPerson(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDeviceType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDefectDepartment(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDefectLevel(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDefectContent(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsReportSchedule(cursor.getShort(offset + 8));
        entity.setIsEntered(cursor.getShort(offset + 9));
        entity.setIsEliminateDefect(cursor.getShort(offset + 10));
        entity.setProcessingDetails(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setEliminationDefectDate(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRemark(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DefectRegistrationRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DefectRegistrationRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DefectRegistrationRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
