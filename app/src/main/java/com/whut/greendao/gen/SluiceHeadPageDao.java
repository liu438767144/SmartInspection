package com.whut.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.whut.smartinspection.model.SluiceHeadPage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SLUICE_HEAD_PAGE".
*/
public class SluiceHeadPageDao extends AbstractDao<SluiceHeadPage, Long> {

    public static final String TABLENAME = "SLUICE_HEAD_PAGE";

    /**
     * Properties of entity SluiceHeadPage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property TaskId = new Property(1, String.class, "taskId", false, "TASK_ID");
        public final static Property SluiceDepartment = new Property(2, String.class, "sluiceDepartment", false, "SLUICE_DEPARTMENT");
        public final static Property SluiceId = new Property(3, String.class, "sluiceId", false, "SLUICE_ID");
        public final static Property SluiceTask = new Property(4, String.class, "sluiceTask", false, "SLUICE_TASK");
        public final static Property SluiceSendPeople = new Property(5, String.class, "sluiceSendPeople", false, "SLUICE_SEND_PEOPLE");
        public final static Property SluiceReceivePeople = new Property(6, String.class, "sluiceReceivePeople", false, "SLUICE_RECEIVE_PEOPLE");
        public final static Property SluiceSendDate = new Property(7, String.class, "sluiceSendDate", false, "SLUICE_SEND_DATE");
        public final static Property SluiceStart = new Property(8, String.class, "sluiceStart", false, "SLUICE_START");
        public final static Property SluiceEnd = new Property(9, String.class, "sluiceEnd", false, "SLUICE_END");
        public final static Property MonitoringOperation = new Property(10, short.class, "monitoringOperation", false, "MONITORING_OPERATION");
        public final static Property SingleOperation = new Property(11, short.class, "singleOperation", false, "SINGLE_OPERATION");
        public final static Property MaintenanceOperation = new Property(12, short.class, "maintenanceOperation", false, "MAINTENANCE_OPERATION");
        public final static Property Remark = new Property(13, String.class, "remark", false, "REMARK");
    }


    public SluiceHeadPageDao(DaoConfig config) {
        super(config);
    }
    
    public SluiceHeadPageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SLUICE_HEAD_PAGE\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TASK_ID\" TEXT," + // 1: taskId
                "\"SLUICE_DEPARTMENT\" TEXT," + // 2: sluiceDepartment
                "\"SLUICE_ID\" TEXT," + // 3: sluiceId
                "\"SLUICE_TASK\" TEXT," + // 4: sluiceTask
                "\"SLUICE_SEND_PEOPLE\" TEXT," + // 5: sluiceSendPeople
                "\"SLUICE_RECEIVE_PEOPLE\" TEXT," + // 6: sluiceReceivePeople
                "\"SLUICE_SEND_DATE\" TEXT," + // 7: sluiceSendDate
                "\"SLUICE_START\" TEXT," + // 8: sluiceStart
                "\"SLUICE_END\" TEXT," + // 9: sluiceEnd
                "\"MONITORING_OPERATION\" INTEGER NOT NULL ," + // 10: monitoringOperation
                "\"SINGLE_OPERATION\" INTEGER NOT NULL ," + // 11: singleOperation
                "\"MAINTENANCE_OPERATION\" INTEGER NOT NULL ," + // 12: maintenanceOperation
                "\"REMARK\" TEXT);"); // 13: remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SLUICE_HEAD_PAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SluiceHeadPage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(2, taskId);
        }
 
        String sluiceDepartment = entity.getSluiceDepartment();
        if (sluiceDepartment != null) {
            stmt.bindString(3, sluiceDepartment);
        }
 
        String sluiceId = entity.getSluiceId();
        if (sluiceId != null) {
            stmt.bindString(4, sluiceId);
        }
 
        String sluiceTask = entity.getSluiceTask();
        if (sluiceTask != null) {
            stmt.bindString(5, sluiceTask);
        }
 
        String sluiceSendPeople = entity.getSluiceSendPeople();
        if (sluiceSendPeople != null) {
            stmt.bindString(6, sluiceSendPeople);
        }
 
        String sluiceReceivePeople = entity.getSluiceReceivePeople();
        if (sluiceReceivePeople != null) {
            stmt.bindString(7, sluiceReceivePeople);
        }
 
        String sluiceSendDate = entity.getSluiceSendDate();
        if (sluiceSendDate != null) {
            stmt.bindString(8, sluiceSendDate);
        }
 
        String sluiceStart = entity.getSluiceStart();
        if (sluiceStart != null) {
            stmt.bindString(9, sluiceStart);
        }
 
        String sluiceEnd = entity.getSluiceEnd();
        if (sluiceEnd != null) {
            stmt.bindString(10, sluiceEnd);
        }
        stmt.bindLong(11, entity.getMonitoringOperation());
        stmt.bindLong(12, entity.getSingleOperation());
        stmt.bindLong(13, entity.getMaintenanceOperation());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(14, remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SluiceHeadPage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(2, taskId);
        }
 
        String sluiceDepartment = entity.getSluiceDepartment();
        if (sluiceDepartment != null) {
            stmt.bindString(3, sluiceDepartment);
        }
 
        String sluiceId = entity.getSluiceId();
        if (sluiceId != null) {
            stmt.bindString(4, sluiceId);
        }
 
        String sluiceTask = entity.getSluiceTask();
        if (sluiceTask != null) {
            stmt.bindString(5, sluiceTask);
        }
 
        String sluiceSendPeople = entity.getSluiceSendPeople();
        if (sluiceSendPeople != null) {
            stmt.bindString(6, sluiceSendPeople);
        }
 
        String sluiceReceivePeople = entity.getSluiceReceivePeople();
        if (sluiceReceivePeople != null) {
            stmt.bindString(7, sluiceReceivePeople);
        }
 
        String sluiceSendDate = entity.getSluiceSendDate();
        if (sluiceSendDate != null) {
            stmt.bindString(8, sluiceSendDate);
        }
 
        String sluiceStart = entity.getSluiceStart();
        if (sluiceStart != null) {
            stmt.bindString(9, sluiceStart);
        }
 
        String sluiceEnd = entity.getSluiceEnd();
        if (sluiceEnd != null) {
            stmt.bindString(10, sluiceEnd);
        }
        stmt.bindLong(11, entity.getMonitoringOperation());
        stmt.bindLong(12, entity.getSingleOperation());
        stmt.bindLong(13, entity.getMaintenanceOperation());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(14, remark);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SluiceHeadPage readEntity(Cursor cursor, int offset) {
        SluiceHeadPage entity = new SluiceHeadPage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // taskId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sluiceDepartment
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sluiceId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sluiceTask
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sluiceSendPeople
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sluiceReceivePeople
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sluiceSendDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // sluiceStart
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // sluiceEnd
            cursor.getShort(offset + 10), // monitoringOperation
            cursor.getShort(offset + 11), // singleOperation
            cursor.getShort(offset + 12), // maintenanceOperation
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SluiceHeadPage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTaskId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSluiceDepartment(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSluiceId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSluiceTask(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSluiceSendPeople(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSluiceReceivePeople(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSluiceSendDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSluiceStart(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSluiceEnd(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMonitoringOperation(cursor.getShort(offset + 10));
        entity.setSingleOperation(cursor.getShort(offset + 11));
        entity.setMaintenanceOperation(cursor.getShort(offset + 12));
        entity.setRemark(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SluiceHeadPage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SluiceHeadPage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SluiceHeadPage entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
