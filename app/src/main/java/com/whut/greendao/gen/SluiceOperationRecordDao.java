package com.whut.greendao.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.whut.smartinspection.model.SluiceOperationRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SLUICE_OPERATION_RECORD".
*/
public class SluiceOperationRecordDao extends AbstractDao<SluiceOperationRecord, Long> {

    public static final String TABLENAME = "SLUICE_OPERATION_RECORD";

    /**
     * Properties of entity SluiceOperationRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property Idd = new Property(1, String.class, "idd", false, "IDD");
        public final static Property ValueChar = new Property(2, String.class, "valueChar", false, "VALUE_CHAR");
        public final static Property SluiceOperationRecordDate = new Property(3, String.class, "sluiceOperationRecordDate", false, "SLUICE_OPERATION_RECORD_DATE");
        public final static Property SluiceOperationContentId = new Property(4, String.class, "sluiceOperationContentId", false, "SLUICE_OPERATION_CONTENT_ID");
        public final static Property Fid = new Property(5, Long.class, "fid", false, "FID");
        public final static Property WholeID = new Property(6, Long.class, "wholeID", false, "WHOLE_ID");
    }

    private Query<SluiceOperationRecord> wholeSluiceCard_SluiceOperationRecordsQuery;

    public SluiceOperationRecordDao(DaoConfig config) {
        super(config);
    }
    
    public SluiceOperationRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SLUICE_OPERATION_RECORD\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"IDD\" TEXT," + // 1: idd
                "\"VALUE_CHAR\" TEXT," + // 2: valueChar
                "\"SLUICE_OPERATION_RECORD_DATE\" TEXT," + // 3: sluiceOperationRecordDate
                "\"SLUICE_OPERATION_CONTENT_ID\" TEXT," + // 4: sluiceOperationContentId
                "\"FID\" INTEGER," + // 5: fid
                "\"WHOLE_ID\" INTEGER);"); // 6: wholeID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SLUICE_OPERATION_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SluiceOperationRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String idd = entity.getIdd();
        if (idd != null) {
            stmt.bindString(2, idd);
        }
 
        String valueChar = entity.getValueChar();
        if (valueChar != null) {
            stmt.bindString(3, valueChar);
        }
 
        String sluiceOperationRecordDate = entity.getSluiceOperationRecordDate();
        if (sluiceOperationRecordDate != null) {
            stmt.bindString(4, sluiceOperationRecordDate);
        }
 
        String sluiceOperationContentId = entity.getSluiceOperationContentId();
        if (sluiceOperationContentId != null) {
            stmt.bindString(5, sluiceOperationContentId);
        }
 
        Long fid = entity.getFid();
        if (fid != null) {
            stmt.bindLong(6, fid);
        }
 
        Long wholeID = entity.getWholeID();
        if (wholeID != null) {
            stmt.bindLong(7, wholeID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SluiceOperationRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String idd = entity.getIdd();
        if (idd != null) {
            stmt.bindString(2, idd);
        }
 
        String valueChar = entity.getValueChar();
        if (valueChar != null) {
            stmt.bindString(3, valueChar);
        }
 
        String sluiceOperationRecordDate = entity.getSluiceOperationRecordDate();
        if (sluiceOperationRecordDate != null) {
            stmt.bindString(4, sluiceOperationRecordDate);
        }
 
        String sluiceOperationContentId = entity.getSluiceOperationContentId();
        if (sluiceOperationContentId != null) {
            stmt.bindString(5, sluiceOperationContentId);
        }
 
        Long fid = entity.getFid();
        if (fid != null) {
            stmt.bindLong(6, fid);
        }
 
        Long wholeID = entity.getWholeID();
        if (wholeID != null) {
            stmt.bindLong(7, wholeID);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SluiceOperationRecord readEntity(Cursor cursor, int offset) {
        SluiceOperationRecord entity = new SluiceOperationRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // idd
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // valueChar
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sluiceOperationRecordDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sluiceOperationContentId
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // fid
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // wholeID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SluiceOperationRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdd(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setValueChar(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSluiceOperationRecordDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSluiceOperationContentId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFid(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setWholeID(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SluiceOperationRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SluiceOperationRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SluiceOperationRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "sluiceOperationRecords" to-many relationship of WholeSluiceCard. */
    public List<SluiceOperationRecord> _queryWholeSluiceCard_SluiceOperationRecords(Long fid) {
        synchronized (this) {
            if (wholeSluiceCard_SluiceOperationRecordsQuery == null) {
                QueryBuilder<SluiceOperationRecord> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Fid.eq(null));
                wholeSluiceCard_SluiceOperationRecordsQuery = queryBuilder.build();
            }
        }
        Query<SluiceOperationRecord> query = wholeSluiceCard_SluiceOperationRecordsQuery.forCurrentThread();
        query.setParameter(0, fid);
        return query.list();
    }

}
